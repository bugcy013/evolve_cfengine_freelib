body common control
{
   inputs => { "@{cfengine_stdlib.inputs}", "lib/evolve_freelib.cf" };
   bundlesequence => { "main", };
}
bundle common cfengine_stdlib
{
  vars:
    cfengine_3_4::
      "inputs" slist => { "libraries/cfengine_stdlib.cf" };
    cfengine_3_5::
      "inputs" slist => {
                          "lib/3.5/paths.cf",
                          "lib/3.5/common.cf",
                          "lib/3.5/commands.cf",
                          "lib/3.5/packages.cf",
                          "lib/3.5/files.cf",
                          "lib/3.5/services.cf",
                          "lib/3.5/processes.cf",
                          "lib/3.5/storage.cf",
                          "lib/3.5/databases.cf",
                          "lib/3.5/monitor.cf",
                          "lib/3.5/guest_environments.cf",
                          "lib/3.5/bundles.cf",
      };

    !(cfengine_3_4||cfengine_3_5)::
      "inputs" slist => {
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/paths.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/common.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/commands.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/packages.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/files.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/services.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/processes.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/storage.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/databases.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/monitor.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/guest_environments.cf",
                          "lib/$(sys.cf_version_major).$(sys.cf_version_minor)/bundles.cf",
      };
}
bundle agent main
{
   methods:

      "any" usebundle => efl_manifest( "/tmp/manifest.txt" );
}

bundle agent efl_manifest ( ref )
{
   meta:
      "purpose" string => "Read manifest to determine if inputs need updating.";
      "field_0" string => "File";
      "field_1" string => "md5sum";

   vars:
      "dim_manifest"
         comment => "Read data file for parsing.",
         int     => readstringarrayidx(
            "manifest_o",
            "${ref}",
            "${efl_c.comment}",
            "${efl_c.array_delimiter}",
            "${efl_c.max_num}",
            "${efl_c.max_bytes}"
         );

      "r"
         comment => "Get index array loaded above.",
         slist   => getindices( "manifest_o" );

      "r2"
         comment => "Work around for bug 2333",
         slist => { "0", "1" };
 
      "manifest[${r}][${r2}]"
         comment => "Work around for bug 2333",
         string => "${manifest_o[${r}][${r2}]}";

      "manifest_file[${r}]"
         comment => "Turn into reference for simpler reading.",
         string  => "manifest[${r}][0]";

      "manifest_md5sum[${r}]"
         comment => "Turn into reference for simpler reading.",
         string  => "manifest[${r}][1]";

   classes:
      "download_${${manifest_file[${r}]}}"
         not => fileexists( "${sys.workdir}/inputs/${${manifest_file[${r}]}}" );

      "download_${${manifest_file[${r}]}}"
         ifvarclass => not( canonify( "download_${${manifest_file[${r}]}}" ) ),
         not        => hashmatch( "${sys.workdir}/inputs/${${manifest_file[${r}]}}", "md5", "${${manifest_md5sum[${r}]}}" );

   reports:
      "download ${${manifest_file[${r}]}}"
         ifvarclass => canonify( "download_${${manifest_file[${r}]}}" );
}
